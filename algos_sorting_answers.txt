1. 
```
FUNCTION quickSort(array, low, high)
   IF low < high THEN
      SET pivotLocation to partition(array, low, high)
      quickSort(array, low, pivotLocation)
      quickSort(array, pivotLocation +1, high)
   END IF
END FUNCTION

FUNCTION partition(array, low, high)
   SET pivot to array[low]
   SET leftWall to low

   FOR low + 1 to high
      IF array[i] < pivot THEN
         swap(array[i], array[leftWall + 1]) 
         SET leftWall to leftWall + 1
      END IF
   END FOR
   swap(pivot, array[leftWall)
   
   RETURN leftWall
END FUNCTION

FUNCTION swap(a, b)
   SET temp to a
   SET a to b
   SET b to temp
END FUNCTION
```

2. 
```
unction selectionSort (collection) {
	for (var i = 0; i < collection.length - 1; i++) {
		var minIndex = i;
		for (var j = i + 1; j < collection.length) {
			if (collection[j] < collection[minIndex]) {
				minIndex = j;
			}
		}
		var temp = collection[i];
		collection[i] = collection[minIndex];
		collection[minIndex] = temp;
	}
	return collection;
}

function bubbleSort (collection) {
	var swapped;
	do {
		swapped = false;
		for (var i = 0; i < collection.length - 1; i++) {
			if (collection[i] > collection[i + 1]) {
				var temp = collection[i];
				collection[i] = collection[i + 1];
				collection[i + 1] = temp;
				swapped = true;
			}
		}
	}
	while (swapped);

	return collection;
}
```

3. Merge sort has a complexity of O(nlogn) and quick sort has a O(n^2). In the case of merge sort, for large data sets it will perform better since the number of splits it takes to get to the base case is logarithmic and the merge operations take linear time so the time complexity is O(nlogn) making it more efficient than most sorting algorithms. The same applies for quick sorts best case but in its worst case its quadratic making it less efficient with larger data sets.

4. In a bucket sort each element is sorted into a bucket and then each bucket is sorted individually using either a different sorting algorithm or by recursively applying the bucket sorting algorithm. A bucket sort is best used when the input is distributed uniformly in an array and it represents a range.